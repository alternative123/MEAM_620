clear;
clc;
map = load_map('emptyMap.txt', .1, 1, 0);
start = [1 1 1];
goal = [5 5 5];

% Set up
xy_res = map{2}(1);
z_res = map{2}(2);
x_size = map{2}(4);
y_size = map{2}(3);
z_size = map{2}(5);
x_min = map{2}(6);
y_min = map{2}(7);
z_min = map{2}(8);
map_data = map{1};
map_size = map{2}(3:5);

s = size(map{1}, 1);
visited = zeros(s, 2);
reachable = -ones(s, 2);
visited(:, 2) = -1;
reachable(:, 2) = 1e10;

% Initialization
start_x_index = floor((start(1) - x_min) / xy_res) + 1;
start_y_index = floor((start(2) - y_min) / xy_res) + 1;
start_z_index = floor((start(3) - z_min) / z_res) + 1;
start_index = start_y_index + (start_x_index - 1) * y_size + (start_z_index - 1) * x_size * y_size;

goal_x_index = floor((goal(1) - x_min) / xy_res) + 1;
goal_y_index = floor((goal(2) - y_min) / xy_res) + 1;
goal_z_index = floor((goal(3) - z_min) / z_res) + 1;
goal_index = goal_y_index + (goal_x_index - 1) * y_size + (goal_z_index - 1) * x_size * y_size;

visited(start_index, :) = [1, 0];
v1 = reshape(visited(:, 1), map_size);    % mark
v2 = reshape(visited(:, 2), map_size);    % cost

r1 = reshape(reachable(:, 1), map_size);  % mark
r2 = reshape(reachable(:, 2), map_size);  % cost

parent = 1e10 * ones(map_size);
parent(start_index) = 0;

% Index Boundary
reachable_index_min = [start_x_index - 1, start_y_index - 1, start_z_index - 1];
reachable_index_max = [start_x_index + 1, start_y_index + 1, start_z_index + 1];

try
    r1(reachable_index_min(2):reachable_index_max(2), reachable_index_min(1):reachable_index_max(1), reachable_index_min(3):reachable_index_max(3)) = 1;
    r2(reachable_index_min(2):reachable_index_max(2), reachable_index_min(1):reachable_index_max(1), reachable_index_min(3):reachable_index_max(3)) = 1;
    r1(start_y_index, start_x_index, start_z_index) = 0;
    r2(start_y_index, start_x_index, start_z_index) = 1e10;
catch exception
    reachable_index_min = bsxfun(@max, reachable_index_min, [1 1 1]);
    reachable_index_max = bsxfun(@min, reachable_index_max, [x_size, y_size, z_size]);

    r1(reachable_index_min(2):reachable_index_max(2), reachable_index_min(1):reachable_index_max(1), reachable_index_min(3):reachable_index_max(3)) = 1;
    r2(reachable_index_min(2):reachable_index_max(2), reachable_index_min(1):reachable_index_max(1), reachable_index_min(3):reachable_index_max(3)) = 1;
    r1(start_y_index, start_x_index, start_z_index) = 0;
    r2(start_y_index, start_x_index, start_z_index) = 1e10;
end
% reachable_index_min = [start_x_index - 1, start_y_index - 1, start_z_index - 1];
% reachable_index_max = [start_x_index + 1, start_y_index + 1, start_z_index + 1];
% min_index = [1 1 1];
% max_index = [x_size, y_size, z_size];
% i1 = find(bsxfun(@lt, reachable_index_min, min_index) == 1);
% i2 = find(bsxfun(@gt, reachable_index_max, max_index) == 1);
% reachable_index_min(i1) = min_index(i1);
% reachable_index_max(i2) = max_index(i2);

if nargin < 4
    astar = false;
end

if astar
    
else
    while v1(goal_index) == 0 && any(r1(:) == 1)
        [val, idx] =  min(r2(:)); % find the min  cost element in reachable group 
        r1(idx) = 0; % visited
        v1(idx) = 1; % visited
        v2(idx) = r2(idx);
        r2(idx) = 1e10;
%         parent(idx) = start_index;
%         start_index = idx;

     
        % find the reachable gourp of idk
        [x_idx, y_idx, z_idx] = ind2sub(map_size, idx);
%         z_idx = floor(idx / (map_size(1) * map_size(2))) + 1;
%         x_idx = floor((idx - (z_idx - 1) * map_size(1) * map_size(2)) / y_size) + 1;
%         y_idx = idx - (z_idx - 1) * map_size(1) * map_size(2) - (x_idx - 1) * y_size;
        reachable_index_min = [x_idx - 1, y_idx - 1, z_idx - 1];
        reachable_index_max = [x_idx + 1, y_idx + 1, z_idx + 1];
        
        % check boundary
%         try
%             new_reachable_group = zeros(size(r1));
% %             new_reachable_group(reachable_index_min(2):reachable_index_max(2), reachable_index_min(1):reachable_index_max(1), reachable_index_min(3):reachable_index_max(3)) = 1;
% %             new_reachable_group(x_idx - 1: x_idx + 1, y_idx - 1: y_idx + 1, z_idx - 1: z_idx + 1) = 1;
%             new_reachable_group(reachable_index_min(1):reachable_index_max(1), reachable_index_min(2):reachable_index_max(2), reachable_index_min(3):reachable_index_max(3)) = 1;
%             
%             new_reachable_not_visited = xor(new_reachable_group, v1);
%             new_reachable = new_reachable_not_visited & (r1 ~= 1);
%             old_reachable = (r1 == 1) & new_reachable_not_visited;
%             
%             
%             r1(new_reachable(new_reachable == 1)) = 1;
%             r2(new_reachable(new_reachable == 1)) = v2(idx) + 1;
%             r2(old_reachable(old_reachable == 1)) = bsxfun(@min, r2(old_reachable(old_reachable == 1)), v2(idx) + 1);
            
%             r2(reachable_index_min(2):rechable_index_max(2), rechable_index_min(1):reachable_index_max(1), reachable_index_min(3):rechable_index_max(3)) = 1;
            
%             r1 == -1 & r1 == 
            
%         catch exception
%             min_index = [1 1 1];
%             max_index = [x_size, y_size, z_size];
%             i1 = find(bsxfun(@lt, reachable_index_min, min_index) == 1);
%             i2 = find(bsxfun(@gt, reachable_index_max, max_index) == 1);
%             reachable_index_min(i1) = min_index(i1);
%             reachable_index_max(i2) = max_index(i2);
            
            reachable_index_min = bsxfun(@max, reachable_index_min, [1 1 1]);
            reachable_index_max = bsxfun(@min, reachable_index_max, [x_size, y_size, z_size]);
            
            
            new_reachable_group = zeros(size(r1));
%             new_reachable_group(reachable_index_min(2):reachable_index_max(2), reachable_index_min(1):reachable_index_max(1), reachable_index_min(3):reachable_index_max(3)) = 1;
            new_reachable_group(reachable_index_min(1):reachable_index_max(1), reachable_index_min(2):reachable_index_max(2), reachable_index_min(3):reachable_index_max(3)) = 1;
            new_reachable_not_visited = new_reachable_group & ~v1;
            new_reachable = new_reachable_not_visited & (r1 ~= 1);
            old_reachable = (r1 == 1) & new_reachable_not_visited;
            
            new_r_idx = find(new_reachable == 1);
            old_r_idx = find(old_reachable == 1);
            
            r1(new_r_idx) = 1;
            r2(new_r_idx) = v2(idx) + 1;
            
            temp = 1e10 * ones(size(r2));
            temp(old_r_idx) = v2(idx) + 1;
            
            old_r_p = find(bsxfun(@lt, r2, temp) == 1);
            r2 = bsxfun(@min, r2, temp);
            if (~isempty(new_r_idx)|| ~isempty(old_r_idx))
%                 p = find(new_reachable_not_visited == 1);
                parent(new_r_idx) = idx;
                parent(old_r_p) = idx;
            end
%             r2(old_reachable(old_reachable == 1)) = bsxfun(@min, r2(old_reachable(old_reachable == 1)), v2(idx) + 1);
%         end
        
%         size(new_r_idx)
    end
end

path = parent(parent ~= 1e10);
num_expanded = 0;

plot_path(map, path);